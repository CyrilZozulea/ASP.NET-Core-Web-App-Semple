@using ApplicationBLL.Database;
@using ApplicationBLL.Models;

@inject IJSRuntime JsRuntime;
@inject ILogger<Table> logger;
@inject NavigationManager uriHelper;

<EditForm Model="model" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />

    <div class="modal-body">
        <div class="row">
            <div class="col">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" id="nameID" name="name" @bind-value="model.Name" placeholder="Enter name">
                <ValidationMessage For="() => model.Name"/>
            </div>
            <div class="col">
                <label class="form-label">Type</label>
                <InputSelect @bind-Value="model.Type" class="form-select" aria-label="Default select example">
                    <option disabled selected value="0">Open this select menu</option>
                    <option value="1">One</option>
                    <option value="2">Two</option>
                    <option value="3">Three</option>
                </InputSelect>
                <ValidationMessage For="() => model.Type" />
            </div>
        </div>
        <div class="mt-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" rows="5" id="descriptionID" placeholder="Enter description" @bind-Value="model.Description" style="resize:none;"></InputTextArea>
            <ValidationMessage For="() => model.Description" />
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-success">Save</button>
    </div>
</EditForm>

@code {
    [Parameter] public int ID { get; set; }

    private BlazorModel model = new BlazorModel();

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!ID.Equals(0))
        {
            BlazorDatabase database = new BlazorDatabase();
            var response = await database.GetOne(ID);

            if (response.ErrorCode.Equals(ProjectCore.EnErrorCode.OK))
            {
                BlazorModel? exist = response.ResponseObject as BlazorModel;

                if (exist != null)
                {
                    model = exist;
                    logger.LogInformation($"Get one by id:{ID} is successful");
                }
            }
            else
            {
                if (response.ErrorCode.Equals(ProjectCore.EnErrorCode.NotExist))
                    await JsRuntime.InvokeVoidAsync("console.warn", $"ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");
                else
                    await JsRuntime.InvokeVoidAsync("console.error", $"ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");

                logger.LogError($"Get one by id:{ID} is failed / Response => ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");
            }
        }
        else
        {
            model = new BlazorModel();
        }
    }

    async void SaveChanges()
    {
        BlazorDatabase database = new BlazorDatabase();

        if (ID.Equals(0))
        {
            var response = await database.Create(model);

            if (response.ErrorCode.Equals(ProjectCore.EnErrorCode.OK))
            {
                logger.LogInformation("Create is successful");
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true); 
            }
            else
            {
                logger.LogError($"Create is failed / Response => ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");
                await JsRuntime.InvokeVoidAsync("console.error", $"ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");  
            }
        }
        else
        {
            var response = await database.Edit(model);

            if (response.ErrorCode.Equals(ProjectCore.EnErrorCode.OK))
            {
                logger.LogInformation("Edit is successful");
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }
            else
            {
                logger.LogError($"Edit is failed / Response => ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");
                await JsRuntime.InvokeVoidAsync("console.error", $"ErrorCode : {(int)response.ErrorCode} | Message: {response.ErrorMessage}");
            }
        }
    }
}
